#!/usr/bin/python3  -u

# COMP 412, Lab 1 test script
#
# This script is lab1 specific in that lab 1 doesn't have clearly defined outputs.
# Thus, it invokes the front end on each file and directs the output to a log file.
# 
# Fall 2022
#
# Students: This file is also an example of a python program that 
# executes directly without a script to invoke it. The first line
# in the file invokes the interpreter and the main entry parses the
# (simple) command line arguments.

import os, pwd, time, calendar, sys, datetime
import operator
from datetime import datetime, date

def run_test(execname, filename, dirname):

    if '/' in filename:
        result_file = tempdir + '/alloc_' +filename.rsplit('/', 1)[1]
    else:
        result_file = tempdir +'/alloc_' + filename

    full_filename = dirname + "/" + filename

    if not '/' in execname:
        execname = './' + execname

    os.system(execname+' -p '+full_filename)
    return 0
 
def main():
    #run in the dir submissions/
    global tempdir
    global debug

    debug = 0
    argc = len(sys.argv)

    if argc != 3:
        print("Syntax should be ./test <executable> <directory>")
        exit(0)

    executable = sys.argv[1]
    directory  = sys.argv[2]

    if (not os.path.exists(executable)):
        print("\nExecutable '"+executable+"' not found.\nTest halts.\n")
        exit(-1)

    if (not os.access(executable, os.X_OK)):
        print("\n'"+executable+"' is not executable.\nTest halts.\n")
        exit(-1)

    if (not os.path.exists(directory)):
        print("\nDirectory '"+directory+"' not found.\nTest halts.\n")
        exit(-1)    

    if (not os.path.isdir(directory)):
        print("\n'"+directory+"' is not a directory.\nTest halts.\n")
        exit(-1)

    if (not os.access(directory, os.R_OK | os.X_OK)):
        print("\n'"+directory+"' is not readable.\nTest halts\n")
        exit(-1)

    ILOCFiles = os.path.abspath(directory)

    print("Testing '"+executable+"'")
    print("ILOC files from '"+ILOCFiles+"'")

    # At this point, we have established that we have an executable
    # and we have a directory.
    # Now, all that we need to do is to test the executable on each
    # ILOC file in the directory

    username = pwd.getpwuid( os.getuid())[0]
    tempdir  = "/tmp/"+username
    if (os.path.exists(tempdir)):
        print("\nWARNING: Temporary directory "+tempdir+" already exists")
        print("May indicate that a prior run failed badly\n")
    else:
        os.system("mkdir "+tempdir)
        os.system("chmod 775 "+tempdir)
        if (not os.access(tempdir, os.R_OK | os.W_OK)):
            print("Could not create temporary directory\n")
            exit(-1)
        else:
            print("Writing temporary files in "+tempdir+"\n")

    print("Failures will be reported on stdout and in the log file\n")

    # Set up the log file
    root = os.getcwd()

    today = date.today()
    time  = datetime.now()
    date_string = today.strftime("%m-%d-%y")
    time_string = time.strftime("%H:%M:%S")
    print('Run on '+date_string + ' at ' + time_string)

    # Break executable into directory and command name, if necessary
    #
    # Because many executables are scripts that reference components
    # relative to the current directory, we need to move to the
    # directory that contains the executable.

    execdir = "."
    if '/' in executable:
        execdir, execbase = os.path.split(executable)
        os.chdir(execdir)
        executable = "./"+execbase

    for filename in sorted(os.listdir(ILOCFiles)):
        splitname = filename.split('.')
        if (len(splitname) == 2 and splitname[1] == 'i'):
            print("Testing "+filename+":")
            errors = run_test(executable,filename,ILOCFiles)
            print('')

    # clean up
    os.system("rm -r "+tempdir)
    if (os.path.exists(tempdir)):
        print('Had problem removing temporary directory '+tempdir)
    else:
        print('\nTest run exits normally.')
    print("")
    exit(0)


if __name__ == "__main__":
    main()
